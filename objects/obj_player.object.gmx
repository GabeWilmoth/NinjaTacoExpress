<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_test_player2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize varibles
grav = 1;
spd = 15;
jspd = 15;
hspd = 0;
vspd = 0;
dblj = true;
smash = false;
image_index = 0;
image_speed = 0;
instance_create(x, y, obj_throw);
instance_create(mouse_x, mouse_y, obj_reticle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// platform physics

var rkey = keyboard_check(vk_right);
var lkey = keyboard_check(vk_left);
var jkey = keyboard_check_pressed(vk_up);
var jkey2 = keyboard_check(vk_up);
var ckey = keyboard_check(vk_down);

//check for ground
if (place_meeting(x, y+1, obj_solid)) 
{
    vspd = 0;
    dblj = true;
    //jumping
    if (jkey)
    {
        vspd = -jspd;
    }
}
else
{
    //wall slide
    if (place_meeting(x+1, y, obj_solid)) || (place_meeting(x-1, y, obj_solid))
    {
        if (!ckey)
        {
            if (vspd &lt; 5)
            {
            vspd += grav;
            }
            else
            {
                vspd -= grav;
            }
        }
        else
        {
            if (vspd &lt; 50)
            {
                vspd += (grav * 10);
                smash = true;
            }
            //quick wall slide
            //if (vspd &lt; 25)
            //{
            //vspd += (grav * 5);
            //}
            //else
            //{
                //vspd -= (grav * 5);
            //}
        }
        //wall jump
        if (place_meeting(x+1, y, obj_solid)) &amp;&amp; (!place_meeting(x, y+1, obj_solid))
        {
            if (jkey)
            {
                vspd = -jspd;
                hspd += -(spd * 3);           
            }
        }
        else
        {
            if (place_meeting(x-1, y, obj_solid)) &amp;&amp; (!place_meeting(x, y+1, obj_solid))
            {
                if (jkey)
                {
                    vspd = -jspd;
                    hspd += (spd * 3);
                }
            }
        }
    }
    else
    {
        //double jump
        if (dblj = true)
        {
            if (jkey)
            {
                if (vspd &gt; 0)
                {
                    vspd = 0;
                }
                vspd = -jspd;
                dblj = false;
            }
        }
        //gravity
        if (!ckey)
        {
            if (vspd &lt; 20)
            {
                vspd += grav;
            }
            else
            {
                vspd -= (grav * 5);
            }
        }
        else
        {
            //quickfall
            if (vspd &lt; 50)
            {
                vspd += (grav * 10);
                smash = true;
            }
        }
    }
}

//jump height modifier
//if (vspd &lt; 0) &amp;&amp; (!jkey2) {vspd = max(vspd, -(jspd / 2))}

//movement
//right
if (rkey)
{
    if (place_meeting(x, y+1, obj_solid))
    {
        hspd = spd;
    }
    else
    {
        if (hspd &lt; spd)
        {
            hspd += spd;
        }
    }
}
if (hspd &gt; spd)
{
    hspd -= (spd/4);
}
//left
if (lkey)
{
    if (place_meeting(x, y+1, obj_solid))
    {
        hspd = -spd;
    }
    else
    {
        if (hspd &gt; -spd)
        {
            hspd += -spd;
        }
    }
}
if (hspd &lt; -spd)
{
    hspd -= -(spd/4);
}
//check for not moving
if ((rkey &amp;&amp; lkey) or (!rkey &amp;&amp; !lkey))
{
    if (vspd = 0)
    {
        hspd = 0;
    }
    else
    {
        if (hspd &gt; 0)
        {
            hspd += -(spd/4);
        }
        if (hspd &lt; 0)
        {
            hspd += (spd/4);
        }
    }   
}


//horizontal collisions
if (place_meeting(x+hspd, y, obj_solid))
{
    while (!place_meeting(x+sign(hspd), y, obj_solid))
    {
        x += sign(hspd);
    }
    hspd = 0;
}
//horizontal movement
x += hspd;

//vertical collisions
if (place_meeting(x, y+vspd, obj_solid))
{
    while (!place_meeting(x, y+sign(vspd), obj_solid))
    {
        y += sign(vspd);
    }
    vspd = 0;
}
//vertical movement
y += vspd;
//X MUST COME BEFORE Y

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
